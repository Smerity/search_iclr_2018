{"notes":[{"tddate":null,"ddate":null,"tmdate":1516099541518,"tcdate":1516099476700,"number":8,"cdate":1516099476700,"id":"r1a9wIjEM","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"BJ5rj_jGz","signatures":["ICLR.cc/2018/Conference/Paper832/AnonReviewer3"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/AnonReviewer3"],"content":{"title":"Re: Response","comment":"Thank you for the clarifications regarding the difference between semantic and syntactic program traces and the extra experiment. I'm bumping up my score to a 7."},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1514318119807,"tcdate":1514318119807,"number":7,"cdate":1514318119807,"id":"S1e4KmgXM","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"BJuWrGW0Z","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Revision Summary","comment":"We thank the reviewers for their helpful comments and feedback, and suggestions for additional experiments. We have uploaded a new revision of the paper with the following revisions:\n\n1. We incorporated the requested clarification questions/definitions in the reviews including defining terms/variables, new figures to show the recurrent models for variable and state trace embeddings, defining error patterns and formulating the repair problem as one of classification, automated instrumentation of programs, data-dependency in traces, training details etc.\n\n2. We added more descriptive examples to showcase the difference between the \"semantic program traces\" (in terms of variable valuations) considered in this work compared to previous works (Reed & De Freitas (2015) and Cai et al. (2017)) that consider \"syntactic traces\".\n\n3. We added additional experimental results to compare syntactic program trace based embeddings (Reed & De Freitas (2015) and Cai et al. (2017)) in Section 5 (Table 3). Although syntactic traces result in better accuracy than Token and AST (~26% vs ~20%), they are still significantly worse than semantic trace embeddings introduced in our work."},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1514011503445,"tcdate":1514011503445,"number":6,"cdate":1514011503445,"id":"HyPdjuszz","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"H1JAev9gz","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response","comment":"Dear reviewer:\n\nWe have uploaded a revision of our paper that incorporates (1) the requested clarifications in the reviews and (2) additional experimental results from comparing our embeddings with syntactic trace based program embeddings (Reed & De Freitas (2015) and Cai et. al (2017)).  Please let us know if any further clarifications are needed. \n"},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1514011458075,"tcdate":1514011458075,"number":5,"cdate":1514011458075,"id":"BJ5rj_jGz","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"H1Pyl4sxM","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response","comment":"Dear reviewer:\n\nOur earlier reply mistakenly omitted our answer to the question in your review.  Our apologies, and we include the answer below. The instrumentation for adding print statements to a program is fully automated, and requires no manual effort or any assumption on the program’s code structure. It traverses the program’s abstract syntax tree and inserts the appropriate print statement after each side-effecting program statement, i.e., a statement that changes the values of some program variables.\n\nCan you please inform us whether there are any additional clarifications needed beyond those in our response?  We have also uploaded a revision of our paper that incorporates (1) the requested clarifications in the reviews and (2) additional experimental results from comparing our embeddings with syntactic trace based program embeddings (Reed & De Freitas (2015) and Cai et. al (2017))."},"nonreaders":[],"replyCount":1,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1514011378238,"tcdate":1514011378238,"number":4,"cdate":1514011378238,"id":"ry5liuiGf","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"rkdmp2J-f","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response","comment":"Dear reviewer:\n\nCan you please inform us whether there are any additional clarifications needed beyond those in our response?  We have also uploaded a revision of our paper that incorporates (1) the requested clarifications in the reviews and (2) additional experimental results from comparing our embeddings with syntactic trace based program embeddings (Reed & De Freitas (2015) and Cai et. al (2017))."},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1513050227324,"tcdate":1513050227324,"number":3,"cdate":1513050227324,"id":"ryPug02Zf","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"H1Pyl4sxM","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response to AnonReviewer3","comment":"We appreciate your point on the differences between our work and Reed & De Freitas (2015).  We have given a detailed discussion regarding this point in our response to AnonReviewer2, which we include below for your convenience.\n\nThere are fundamental differences between the syntactic program traces explored in prior work (Reed & De Freitas (2015)) and the “semantic program traces” considered in our work. Consider the example in Figure 1. According to Reed & De Freitas (2015), the two sorting algorithms will have an identical representation with respect to statements that modify the variable A:\n\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\n\nOur representation, on the other hand, can capture their semantic differences in terms of program states by also only considering the variable A: \n\n  Bubble          Insertion\n[5,5,1,4,3]\t[5,5,1,4,3]\n[5,8,1,4,3]\t[5,8,1,4,3]\n[5,1,1,4,3] \t[5,1,1,4,3]\n[5,1,8,4,3] \t[5,1,8,4,3]\n[1,1,8,4,3] \t[5,1,4,4,3]\n[1,5,8,4,3] \t[5,1,4,8,3]\n[1,5,4,4,3]\t[5,1,4,3,3]\n[1,5,4,8,3] \t[5,1,4,3,8]\n[1,4,4,8,3] \t[1,1,4,3,8]\n[1,4,5,8,3] \t[1,5,4,3,8]\n[1,4,5,3,3] \t[1,4,4,3,8]\n[1,4,5,3,8] \t[1,4,5,3,8]\n[1,4,3,3,8] \t[1,4,3,3,8]\n[1,4,3,5,8] \t[1,4,3,5,8]\n[1,3,3,5,8] \t[1,3,3,5,8]\n[1,3,4,5,8] \t[1,3,4,5,8]\n\nThis example also illustrates concretely the point made in Section 1 that minor syntactic differences can lead to signiﬁcant semantic differences. Therefore, the approach of Reed & De Freitas is insufficient to capture such semantic differences.  As another example, consider the following two programs:\n\nstatic void Main(string[] args)\n{\n        string str = String.Empty;\n        int x = 0;\n        x++;\n}\n\nstatic void Main(string[] args)\n{\n        string s = \"\";\n        int y = 0;\n        y = y+1;\n}\n\nAccording to the representation proposed in Reed & De Freitas (2015), the first program is represented as [string str = String.Empty, int x = 0, x++], while the second represented as [string s = \"\", int y = 0, y = y+1].  Although the two programs share the same semantics, they are represented differently due to syntactic variations. In contrast, our work captures the same semantic trace for both programs, i.e., [ [“”, NA], [“”,0], [“”,1]].\n\nTo sum up, the embedding proposed in Reed & De Freitas (2015) is a syntactic representation, and cannot precisely capture a program’s semantics and abstract away its syntactic redundancies. Consequently, the encoder will not be able to learn the true feature dimensions in the embeddings.  We also performed additional experiments to contrast the two trace-based approaches. We used the same configuration of encoder (cf. Section 5) to embed the syntactic traces on the same datasets for the same classification problem. The results are as follows:\n\nProblems                        Reed & De Freitas (2015)          Token                 AST            Dependency Model\nPrint Chessboard                   26.3%                                   16.8%                16.2%                    99.3%\nCount Parentheses                25.5%                                   19.3%                21.7%\t                 98.8%\nGenerate Binary Digits         23.8%                                    21.2%                20.9%\t                 99.2%\n\nAlthough syntactic traces result in better accuracy than Token and AST, they are still significantly worse than semantic embeddings introduced in our work. \n\nOur revision will include the representation proposed in Reed & De Freitas (2015) for the example programs in Figure 1. It will also include the experimental setup (in Section 5) and the new results (in a new column of Table 3).\n\nWe will also add a citation to Cai et al. (2017), which uses the exact same program representation as Reed & De Freitas (2015). The other contributions in Cai et al. (2017) are unrelated to our work. \n\nWe hope that our response helped address your concerns. Please let us know if you have any additional questions. Thank you. \n"},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1513049814786,"tcdate":1513049814786,"number":2,"cdate":1513049814786,"id":"BJk11A3bz","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"rkdmp2J-f","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response to AnonReviewer2","comment":"Thank you for the review.  We clarify below the four specific points raised. \n\n1. By “error patterns”, we mean different types of errors that students made in their programming submissions. This work focuses on providing quality feedback to students.  It may be extended in future work to help software developers, where error patterns can correspond to different classes of errors that developers may make. However, it is not the consideration for the current version of the paper.\n\n2. We will clarify all abbreviations and terms used in the paper. \n\nYes, GRU is Gated Recurrent Unit.\n\n3. The results of our latest experiments clearly indicate that this work substantially improves prior work. We briefly highlight the main reasons below.  First, there are fundamental differences between the syntactic program traces explored in prior work (Reed & De Freitas (2015)) and the “semantic program traces” considered in our work. Consider the example in Figure 1. According to Reed & De Freitas (2015), the two sorting algorithms will have an identical representation with respect to statements that modify the variable A:\n\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\t\t\nA[j + 1] = tmp\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\nA[j] = A[j + 1]\t\t\nA[j + 1] = tmp\t\t\n\nOur representation, on the other hand, can capture their semantic differences in terms of program states by also only considering the variable A: \n\n Bubble           Insertion\n[5,5,1,4,3]\t[5,5,1,4,3]\n[5,8,1,4,3]\t[5,8,1,4,3]\n[5,1,1,4,3] \t[5,1,1,4,3]\n[5,1,8,4,3] \t[5,1,8,4,3]\n[1,1,8,4,3] \t[5,1,4,4,3]\n[1,5,8,4,3] \t[5,1,4,8,3]\n[1,5,4,4,3]\t[5,1,4,3,3]\n[1,5,4,8,3] \t[5,1,4,3,8]\n[1,4,4,8,3] \t[1,1,4,3,8]\n[1,4,5,8,3] \t[1,5,4,3,8]\n[1,4,5,3,3] \t[1,4,4,3,8]\n[1,4,5,3,8] \t[1,4,5,3,8]\n[1,4,3,3,8] \t[1,4,3,3,8]\n[1,4,3,5,8] \t[1,4,3,5,8]\n[1,3,3,5,8] \t[1,3,3,5,8]\n[1,3,4,5,8] \t[1,3,4,5,8]\n\nThis example also illustrates concretely the point made in Section 1 that minor syntactic differences can lead to signiﬁcant semantic differences. Therefore, the approach of Reed & De Freitas is insufficient to capture such semantic differences.  As another example, consider the following two programs:\n\nstatic void Main(string[] args)\n{\n        string str = String.Empty;\n        int x = 0;\n        x++;\n}\n\nstatic void Main(string[] args)\n{\n        string s = \"\";\n        int y = 0;\n        y = y+1;\n}\n\nAccording to the representation proposed in Reed & De Freitas (2015), the first program is represented as [string str = String.Empty, int x = 0, x++], while the second represented as [string s = \"\", int y = 0, y = y+1].  Although the two programs share the same semantics, they are represented differently due to syntactic variations. In contrast, our work captures the same semantic trace for both programs, i.e., [ [“”, NA], [“”,0], [“”,1]].\n\nTo sum up, the embedding proposed in Reed & De Freitas (2015) is a syntactic representation, and cannot precisely capture a program’s semantics and abstract away its syntactic redundancies. Consequently, the encoder will not be able to learn the true feature dimensions in the embeddings.  We also performed additional experiments to contrast the two trace-based approaches. We used the same configuration of encoder (cf. Section 5) to embed the syntactic traces on the same datasets for the same classification problem. The results are as follows:\n\nProblems                        Reed & De Freitas (2015)          Token                 AST            Dependency Model\nPrint Chessboard                   26.3%                                   16.8%                16.2%                    99.3%\nCount Parentheses                25.5%                                   19.3%                21.7%\t                 98.8%\nGenerate Binary Digits          23.8%                                   21.2%               20.9%\t                 99.2%\n\nAlthough syntactic traces result in better accuracy than Token and AST, they are still significantly worse than semantic embeddings introduced in our work. \n\nOur revision will include the representation proposed in Reed & De Freitas (2015) for the example programs in Figure 1. It will also include the experimental setup (in Section 5) and the new results (in a new column of Table 3).\n\nWe will also add a citation to Cai et al. (2017), which uses the exact same program representation as Reed & De Freitas (2015). The other contributions in Cai et al. (2017) are unrelated to our work. \n\n4. The first paragraph of Section 4.3 addresses the scalability of the dependency architecture that you questioned. \n“ ...Processing each variable id with a single RNN among all programs in the dataset will not only cause memory issues, but more importantly the loss of precision…”\n\nWe hope that our response helped address your concerns. Please let us know if you have any additional questions. Thank you. \n"},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1513049615221,"tcdate":1513049615221,"number":1,"cdate":1513049615221,"id":"H1DM0ah-z","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Comment","forum":"BJuWrGW0Z","replyto":"H1JAev9gz","signatures":["ICLR.cc/2018/Conference/Paper832/Authors"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference/Paper832/Authors"],"content":{"title":"Response to AnonReviewer1","comment":"Thank you for the helpful suggestions.  Below, we answer the questions that you raised in the review.\n\nOur revision will clarify the definition of the “Evidence” variable, which, in short, denotes the result of multiplying weight on the program embedding vector and then adding the bias.\n\nYes, “predicting the error patterns” means classifying the kinds of errors that students made in their programs. \n\nThe encoders in Figures 3 and 4 are recurrent as they encode variable traces (each variable trace is a sequence of variable values) and states (a state is a set of variable values at a particular program location). The figures in our revision will make these clearer.\n\nDependencies happen primarily in assignment statements. API calls with side effects also introduce dependencies. For example, in the code snippet below,  “sb” depends on “s”:\n\nStringBuilder sb = new StringBuilder();\nString s = “str”;\nsb.Append(s);\n"},"nonreaders":[],"replyCount":0,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1516646917499,"tcdate":1512193315374,"number":3,"cdate":1512193315374,"id":"rkdmp2J-f","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Review","forum":"BJuWrGW0Z","replyto":"BJuWrGW0Z","signatures":["ICLR.cc/2018/Conference/Paper832/AnonReviewer2"],"readers":["everyone"],"content":{"title":"Interesting application, but lacks clarity","rating":"6: Marginally above acceptance threshold","review":"This paper considers the task of learning program embeddings with neural networks with the ultimate goal of bug detection program repair in the context of students learning to program. Three NN architectures are explored, which leverage program semantics rather than pure syntax.  The approach is validated using programming assignments from an online course, and compared against syntax based approaches as a baseline.\n\nThe problem considered by the paper is interesting, though it's not clear from the paper that the approach is a substantial improvement over previous work. This is in part due to the fact that the paper is relatively short, and would benefit from more detail.  I noticed the following issues:\n\n1) The learning task is based on error patterns, but it's not clear to me what exactly that means from a software development standpoint.\n2) Terms used in the paper are not defined/explained. For example, I assume GRU is gated recurrent unit, but this isn't stated.\n3) Treatment of related work is lacking.  For example, the Cai et al. paper from ICLR 2017 is not considered\n4) If I understand dependency reinforcement embedding correctly, a RNN is trained for every trace. If so, is this scalable?\n\nI believe the work is very promising, but this manuscript should be improved prior to publication.","confidence":"2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper"},"writers":[],"nonreaders":[],"replyCount":2,"writable":false,"revisions":true,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1516099420013,"tcdate":1511895007195,"number":2,"cdate":1511895007195,"id":"H1Pyl4sxM","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Review","forum":"BJuWrGW0Z","replyto":"BJuWrGW0Z","signatures":["ICLR.cc/2018/Conference/Paper832/AnonReviewer3"],"readers":["everyone"],"content":{"title":".","rating":"7: Good paper, accept","review":"Summary of paper: The paper proposes an RNN-based neural network architecture for embedding programs, focusing on the semantics of the program rather than the syntax. The application is to predict errors made by students on programming tasks. This is achieved by creating training data based on program traces obtained by instrumenting the program by adding print statements. The neural network is trained using this program traces with an objective for classifying the student error pattern (e.g. list indexing, branching conditions, looping bounds).\n\n---\n\nQuality: The experiments compare the three proposed neural network architectures with two syntax-based architectures. It would be good to see a comparison with some techniques from Reed & De Freitas (2015) as this work also focuses on semantics-based embeddings.\nClarity: The paper is clearly written.\nOriginality: This work doesn't seem that original from an algorithmic point of view since Reed & De Freitas (2015) and Cai et. al (2017) among others have considered using execution traces. However the application to program repair is novel (as far as I know).\nSignificance: This work can be very useful for an educational platform though a limitation is the need for adding instrumentation print statements by hand.\n\n---\n\nSome questions/comments:\n- Do we need to add the print statements for any new programs that the students submit? What if the structure of the submitted program doesn't match the structure of the intended solution and hence adding print statements cannot be automated?\n\n---\n\nReferences \n\nCai, J., Shin, R., & Song, D. (2017). Making Neural Programming Architectures Generalize via Recursion. In International Conference on Learning Representations (ICLR).","confidence":"3: The reviewer is fairly confident that the evaluation is correct"},"writers":[],"nonreaders":[],"replyCount":2,"writable":false,"revisions":true,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1515642518324,"tcdate":1511841991280,"number":1,"cdate":1511841991280,"id":"H1JAev9gz","invitation":"ICLR.cc/2018/Conference/-/Paper832/Official_Review","forum":"BJuWrGW0Z","replyto":"BJuWrGW0Z","signatures":["ICLR.cc/2018/Conference/Paper832/AnonReviewer1"],"readers":["everyone"],"content":{"title":"A solid paper with some clarity issues","rating":"7: Good paper, accept","review":"The authors present 3 architectures for learning representations of programs from execution traces. In the variable trace embedding, the input to the model is given by a sequence of variable values. The state trace embedding combines embeddings for variable traces using a second recurrent encoder. The dependency enforcement embedding performs element-wise multiplication of embeddings for parent variables to compute the input of the GRU to compute the new hidden state of a variable. The authors evaluate their architectures on the task of predicting error patterns for programming assignments from Microsoft DEV204.1X (an introduction to C# offered on edx) and problems on the Microsoft CodeHunt platform. They additionally use their embeddings to decrease the search time for the Sarfgen program repair system.\n\nThis is a fairly strong paper. The proposed models make sense and the writing is for the most part clear, though there are a few places where ambiguity arises:\n\n- The variable \"Evidence\" in equation (4) is never defined. \n\n- The authors refer to \"predicting the error patterns\", but again don't define what an error pattern is. The appendix seems to suggest that the authors are simply performing multilabel classification based on a predefined set of classes of errors, is this correct? \n\n- It is not immediately clear from Figures 3 and 4 that the architectures employed are in fact recurrent.\n\n- Figure 5 seems to suggest that dependencies are only enforced at points in a program where assignment is performed for a variable, is this correct?\n\nAssuming that the authors can address these clarity issues, I would in principle be happy for the paper to appear. ","confidence":"4: The reviewer is confident but not absolutely certain that the evaluation is correct"},"writers":[],"nonreaders":[],"replyCount":2,"writable":false,"revisions":false,"tags":[],"forumContent":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]}},{"tddate":null,"ddate":null,"tmdate":1514011138273,"tcdate":1509135615596,"number":832,"cdate":1509739074637,"id":"BJuWrGW0Z","invitation":"ICLR.cc/2018/Conference/-/Blind_Submission","forum":"BJuWrGW0Z","signatures":["ICLR.cc/2018/Conference"],"readers":["everyone"],"writers":["ICLR.cc/2018/Conference"],"content":{"title":"Dynamic Neural Program Embeddings for Program Repair","abstract":"Neural program embeddings have shown much promise recently for a variety of program analysis tasks, including program synthesis, program repair, fault localization, etc. However, most existing program embeddings are based on syntactic features of programs, such as raw token sequences or abstract syntax trees. Unlike images and text, a program has an unambiguous semantic meaning that can be difﬁcult to capture by only considering its syntax(i.e. syntactically similar programs can exhibit vastly different run-time behavior), which makes syntax-based program embeddings fundamentally limited. This paper proposes a novel semantic program embedding that is learned from program execution traces. Our key insight is that program states expressed as sequential tuples of live variable values not only captures program semantics more precisely, but also offer a more natural ﬁt for Recurrent Neural Networks to model. We evaluate different syntactic and semantic program embeddings on predicting the types of errors that students make in their submissions to an introductory programming class and two exercises on the CodeHunt education platform. Evaluation results show that our new semantic program embedding signiﬁcantly outperforms the syntactic program embeddings based on token sequences and abstract syntax trees. In addition, we augment a search-based program repair system with the predictions obtained from our semantic embedding, and show that search efﬁciency is also signiﬁcantly improved.","pdf":"/pdf/106d9d148371aa5e52a41c3a3eb000d55341783f.pdf","TL;DR":"A new way of learning semantic program embedding","paperhash":"anonymous|dynamic_neural_program_embeddings_for_program_repair","_bibtex":"@article{\n  anonymous2018dynamic,\n  title={Dynamic Neural Program Embeddings for Program Repair},\n  author={Anonymous},\n  journal={International Conference on Learning Representations},\n  year={2018},\n  url={https://openreview.net/forum?id=BJuWrGW0Z}\n}","authors":["Anonymous"],"authorids":["ICLR.cc/2018/Conference/Paper832/Authors"],"keywords":["Program Embedding","Program Semantics","Dynamic Traces"]},"nonreaders":[],"replyCount":11,"writable":false,"revisions":true,"tags":[],"forumContent":null,"tauthor":"ICLR.cc/2018/Conference"}],"limit":2000,"offset":0}